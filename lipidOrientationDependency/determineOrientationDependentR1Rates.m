clc
clearvars -except trajectoryX trajectoryY trajectoryZ ...
    simulationConfiguration

configuration = readConfigurationFile('config.txt');
if configuration.runOnServer
    baseConfiguration = readConfigurationFile( ...
        configuration.path2BaseConfigurationOnServer);
    path2Results = baseConfiguration.path2ResultsOnServer;
    addpath(genpath(baseConfiguration.path2LibraryOnServer));
else
    baseConfiguration = readConfigurationFile( ...
        scalingRateConfiguration.path2BaseConfigurationOnLocalMachine);
    path2Resuts = baseConfiguration.path2ResultsOnLocalMachine;
    addpath(genpath(baseConfiguration.path2LibraryOnLocalMachine));
end

[~,~,~,path2LogFile] = ...
    setUpDependenciesBasedOnConfiguration(configuration);
deleteLogFile(path2LogFile);
logMessage('Starting Script to validate scaling rates.' ...
    ,path2LogFile);
printLineBreakToLogFile(path2LogFile);
[path2Data,path2Save,path2ConstantsFile,path2LogFile] = ...
    setUpDependenciesBasedOnConfiguration(configuration);

%% Analyse file name for simulation
fileName = configuration.fileName;
simulationDate = getSimulationDateFromFileName(fileName);
whichLipid = getLipidNameFromFileName(fileName);
waterModel = getWaterModelFromFileName(fileName);
formOfLayer = getFormOfLayerFromFileName(fileName);
waterMoleculesCount = getWaterMoleculesCountFromFileName(fileName);
constituent = getConstituentFromFileName(fileName);
composingMode = getComposingModeFromFileName(fileName);
samplingFrequency = getSamplingFrequencyFromFileName(fileName);
simTime = getSimulationTimeFromFileName(fileName);

path2File = sprintf('%s%s/%s.mat',path2Data,whichLipid,fileName);

logMessage(sprintf(['Data is simulated with the following ' ...
    'information: \n' ...
    '    GROMACS Simulation Date: %s \n' ...
    '    Lipid that is simulated: %s \n' ...
    '    Used Water Model: %s \n' ...
    '    Layer Form: %s \n' ...
    '    Number of Water Molecules: %s \n' ...
    '    Constituent of Simulation: %s \n' ...
    '    Composing mode in postprocessing: %s \n' ...
    '    Basic Sampling Frequency(changes during sim): %.3f ps \n' ...
    '    Simulation Time: %s ns\n'],simulationDate,whichLipid,waterModel ...
    ,formOfLayer,waterMoleculesCount,constituent,composingMode ...
    ,samplingFrequency,simTime),path2LogFile,false);

logMessage(sprintf(['The following directories are used: \n' ...
    '    Path of Data: %s \n' ...
    '    Path of File: %s \n' ...
    '    Path where data is saved: %s \n' ...
    '    Path to Log File: %s \n'],path2Data,path2File,path2Save ...
    ,path2LogFile),path2LogFile,false);
logMessage('System was set up.',path2LogFile);

%% Load data
if ~configuration.dataLoaded
    logMessage('Start loading data.', path2LogFile);
    [trajectoryX,trajectoryY,trajectoryZ,simulationConfiguration] = ...
        loadTrajectoriesAndSimConfig(path2File);
    logMessage('Loading data finished',path2LogFile)
else
    logMessage('Data was already loaded in run before.',path2LogFile)
end

logMessage(sprintf('     The system has %i hydrogen atoms.' ...
    ,size(trajectoryX,1)),path2LogFile,false);

%% Define constants
logMessage('Defining constants.',path2LogFile,false);
constants = readConstantsFile(path2ConstantsFile);

dipolDipolConstant = 3/4*(constants.vaccumPermeability/(4*pi) ...
    *constants.hbar*constants.gyromagneticRatioOfHydrogenAtom^2)^2 ...
    /(constants.nanoMeter^6);
omega0 = constants.gyromagneticRatioOfHydrogenAtom ...
    *configuration.mainMagneticField;


%% Define simulation parameters
logMessage('Defining simulation parameters.',path2LogFile,true);

samplingFrequency = samplingFrequency * constants.picoSecond;
[numberOfHs,timeSteps] = size(trajectoryX);
simTime = str2num(simTime)*constants.nanoSecond; %#ok<ST2NM>
logMessage(sprintf(['Found %d hydrogen atoms at %d time ' ...
    'steps of %.3d s'],numberOfHs,timeSteps,samplingFrequency) ...
    ,path2LogFile,false);

lags = round(configuration.fractionForLags*timeSteps);
logMessage(sprintf(['The lag is set to %d time steps, which ' ...
    'is equivalent to %.2f %%. This config shortens the correlation' ...
    ' functions.'],lags,(configuration.fractionForLags)*100) ...
    ,path2LogFile,false);

nearestNeighbours = configuration.nearestNeighboursCase;
if nearestNeighbours >= numberOfHs
    logMessage(['The number of nearest neighbours is higher than '
        'the number of possible atoms. PLEASE CHECK YOUR CONFIG ' ...
        'FILE!'],path2LogFile);
    error(['The number of nearest neighbours is higher than the ' ...
        'number of possible atoms. Please check your config file!']);
end
logMessage(sprintf(['Analysing %.f nearst neighbours of ' ...
    'overall %.f hydrogen atoms'],nearestNeighbours,numberOfHs) ...
    ,path2LogFile,false);

atomsToCalculate = configuration.atomsToCalculate;
startDateOfSimulation = datestr(now,'yyyymmdd');
logMessage(sprintf('Calculate %i atoms',atomsToCalculate) ...
    ,path2LogFile,false);

orientationAngles = deg2rad(getValuesFromStringEnumeration( ...
    configuration.fibreOrientations,';','numeric'));
fibreOrientationsCount = size(orientationAngles,2);
logMessage(['Found the orientations' sprintf(' %.f',rad2deg( ...
    orientationAngles))],path2LogFile,false);

positionAngles = deg2rad(getValuesFromStringEnumeration( ...
    configuration.myelinPositions,';','numeric'));
positionsInMyelinCount = size(positionAngles,2);
logMessage(['Found the positions' sprintf(' %.f',rad2deg( ...
    positionAngles))],path2LogFile,false);

%% Preallocate some arrays
logMessage('Preallocation of arrays.',path2LogFile,true);
r1WithPerturbationTheory = zeros(fibreOrientationsCount ...
    ,positionsInMyelinCount,atomsToCalculate);
scaledR1Rates = zeros(fibreOrientationsCount ...
    ,positionsInMyelinCount,atomsToCalculate);
meanPositions = single([mean(trajectoryX,2) mean(trajectoryY,2) ...
    mean(trajectoryZ,2)]);

atomCounter = 1;
atomIndex = zeros(1,atomsToCalculate);
calculationSteps = fibreOrientationsCount*positionsInMyelinCount;

randomSequenceOfAtoms = randperm(numberOfHs);

relativeX = zeros(numberOfHs,timeSteps,'single');
relativeY = zeros(numberOfHs,timeSteps,'single');
relativeZ = zeros(numberOfHs,timeSteps,'single');

nearestNeighboursX = zeros(nearestNeighbours,timeSteps,'single');
nearestNeighboursY = zeros(nearestNeighbours,timeSteps,'single');
nearestNeighboursZ = zeros(nearestNeighbours,timeSteps,'single');
nearestNeighbourDistancesPow3 = zeros(nearestNeighbours,timeSteps ...
    ,'single');

rotatedX = zeros(nearestNeighbours,timeSteps,'single');
rotatedY = zeros(nearestNeighbours,timeSteps,'single');
rotatedZ = zeros(nearestNeighbours,timeSteps,'single');

polarAngle = zeros(nearestNeighbours,timeSteps,'single');
azimuthAngle = zeros(nearestNeighbours,timeSteps,'single');

sphericalHarmonicZerothOrder = zeros(nearestNeighbours,timeSteps ...
    ,'like',single(1j));
sphericalHarmonicFirstOrder = zeros(nearestNeighbours,timeSteps ...
    ,'like',single(1j));
sphericalHarmonicSecondOrder = zeros(nearestNeighbours,timeSteps ...
    ,'like',single(1j));

correlationFunction0W0 = zeros(1,lags,'like',single(1j));
correlationFunction1W0 = zeros(1,lags,'like',single(1j));
correlationFunction2W0 = zeros(1,lags,'like',single(1j));

correlationFunction0W0Saver = zeros(fibreOrientationsCount ...
    ,positionsInMyelinCount,lags,'like',single(1i));
correlationFunction1W0Saver = zeros(fibreOrientationsCount ...
    ,positionsInMyelinCount,lags,'like',single(1i));
correlationFunction2W0Saver = zeros(fibreOrientationsCount ...
    ,positionsInMyelinCount,lags,'like',single(1i));

logMessage('    Created correlation function saver',path2LogFile,false);
atomTimer = [];

if configuration.reloadOldSimulation
    logMessage(sprintf(['Loading results from old simulation. ' ...
        'Path: %s'],configuration.path2OldResults),path2LogFile);
    oldSimulation = load(configuration.path2OldResults);
    oldSimulationStartDate = oldSimulation.startDateOfSimulation;
    oldSimulationLastSaving = oldSimulation.lastSavingDate;
    logMessage(sprintf(['The old simulation was started on %s and ' ...
        'was last saved on %s.'],oldSimulation.startDateOfSimulation ...
        ,oldSimulation.lastSavingDate),path2LogFile,false);
    randomSequenceOfAtoms = oldSimulation.randomSequenceOfAtoms;
    atomCounter = oldSimulation.atomCounter;
    atomTimer = oldSimulation.atomTimer;
    atomIndex(1:atomCounter) = oldSimulation.atomIndex;
    r1WithPerturbationTheory(:,:,1:atomCounter,:) = ...
        oldSimulation.r1WithPerturbationTheory(:,:,1:atomCounter,:);
    scaledR1Rates(:,:,1:atomCounter,:) = ...
        oldSimulation.scaledR1Rates(:,:,1:atomCounter,:);
    correlationFunction0W0Saver = ...
        oldSimulation.correlationFunction0W0Saver;
    correlationFunction1W0Saver = ...
        oldSimulation.correlationFunction1W0Saver;
    correlationFunction2W0Saver = ...
        oldSimulation.correlationFunction2W0Saver;
    atomCounter = atomCounter + 1;
    clearvars oldSimulation;
end

printBreakLineToLogFile(path2LogFile);


for atomNumber = randomSequenceOfAtoms(atomCounter:atomsToCalculate)
    atomTimerStart = tic;
    logMessage(sprintf('Selected atom number %i',atomNumber),path2LogFile);
    atomIndex(atomCounter) = atomNumber;
    
    logMessage('    Relative positions.',path2LogFile,false);
    [relativeX,relativeY,relativeZ] = calculateRelativePositions( ...
        trajectoryX,trajectoryY,trajectoryZ,atomNumber);
    
    [nearestNeighboursX,nearestNeighboursY,nearestNeighboursZ ...
        ,nearestNeighbourDistancesPow3] = findNearestNeighbours( ...
        nearestNeighbours,atomNumber,relativeX,relativeY ...
        ,relativeZ);
    
    for positionNumber = 1:positionsInMyelinCount
        positionTimer = tic;
        positionAngle = positionAngles(positionNumber);
        zAxis = [0 0 1];
        rotationMatrixPosition = get3DRotationMatrix( ...
            positionAngle,zAxis);
        for orientationNumber = 1:fibreOrientationsCount
            transformationTimer = tic;
            orientationAngle = orientationAngles(orientationNumber);
            logMessage(sprintf('=> Orientation: %i, position: %i' ...
                ,rad2deg(orientationAngle),rad2deg(positionAngle)) ...
                ,path2LogFile);
            yAxis = [0 1 0];
            rotationMatrixOrientation = get3DRotationMatrix( ...
                orientationAngle,yAxis);
            totalRotationMatrix = ...
                rotationMatrixOrientation*rotationMatrixPosition;
            logMessage('    Coordinate transformation.',path2LogFile ...
                ,false);
            [rotatedX,rotatedY,rotatedZ]  ...
                = rotateTrajectoriesWithRotationMatrix( ...
                totalRotationMatrix,nearestNeighboursX ...
                ,nearestNeighboursY,nearestNeighboursZ);
            
            logMessage('    Spherical coordinates.',path2LogFile,false);
            [polarAngle,azimuthAngle] = ...
                transformToSphericalCoordinates(rotatedX,rotatedY ...
                ,rotatedZ);
            
            logMessage('    Spherical harmonics.',path2LogFile,false);
            [sphericalHarmonicZerothOrder,sphericalHarmonicFirstOrder ...
                ,sphericalHarmonicSecondOrder] ...
                = calculateSphericalHarmonics(polarAngle,azimuthAngle ...
                ,nearestNeighbourDistancesPow3);
            polarAngle = zeros(nearestNeighbours,timeSteps,'single');
            azimuthAngle = zeros(nearestNeighbours,timeSteps,'single');
            
            logMessage('    Correlation function 0.' ...
                ,path2LogFile,false);
            correlationFunction0W0 ...
                = calculateCorrelationFunction( ...
                sphericalHarmonicZerothOrder,lags);
            correlationFunction0W0Saver(orientationNumber ...
                ,positionNumber,:) = (squeeze( ...
                correlationFunction0W0Saver(orientationNumber ...
                ,positionNumber,:))*(atomCounter-1) ...
                + correlationFunction0W0')/atomCounter;
            
            logMessage('    Correlation function 1.' ...
                ,path2LogFile,false);
            correlationFunction1W0 ...
                = calculateCorrelationFunction( ...
                sphericalHarmonicFirstOrder,lags);
            correlationFunction1W0Saver(orientationNumber ...
                ,positionNumber,:) = (squeeze( ...
                correlationFunction1W0Saver(orientationNumber ...
                ,positionNumber,:))*(atomCounter-1) ...
                + correlationFunction1W0')/atomCounter;
            
            logMessage('    Correlation function 2.' ...
                ,path2LogFile,false);
            correlationFunction2W0 ...
                = calculateCorrelationFunction( ...
                sphericalHarmonicSecondOrder,lags);
            correlationFunction2W0Saver(orientationNumber ...
                ,positionNumber,:) = (squeeze( ...
                correlationFunction2W0Saver(orientationNumber ...
                ,positionNumber,:))*(atomCounter-1)  ...
                + correlationFunction2W0')/atomCounter;
            
            logMessage('    Spectral density and relaxation rates' ...
                ,path2LogFile,false);
            [spectralDensityW0,spectralDensity2W0] = ...
                calculateSpectralDensities(correlationFunction1W0 ...
                ,correlationFunction2W0,omega0,samplingFrequency,lags);
            r1WithPerturbationTheory(orientationNumber,positionNumber ...
                ,atomCounter) = ...
                calculateR1WithSpectralDensity(spectralDensityW0 ...
                ,spectralDensity2W0,dipolDipolConstant);
            scaledR1Rates(orientationNumber,positionNumber ...
                ,atomCounter) = r1WithPerturbationTheory( ...
                orientationNumber,positionNumber,atomCounter) ...
                *configuration.scalingRate;
            logMessage(sprintf('    Relaxation Rate: %.4f' ...
                ,scaledR1Rates(orientationNumber,positionNumber ...
                ,atomCounter)),path2LogFile,false);
            printDottedBreakLineToLogFile(path2LogFile);
            
        end
%         logMessage(sprintf(['Finished position %i. Needed '...
%             'time %.4f'],rad2deg(positionAngle),toc(positionTimer)) ...
%             ,path2LogFile,false);
    end
    
    if mod(atomCounter,5) == 0
        lastSavingDate = datestr(now,'yyyymmdd_HHMM');
        createDataSavingObject();
        save(path2Save,'-struct','dataSavingObject','-v7.3');
        logMessage('Saved data',path2LogFile);
    end
    logMessage(sprintf('Calculated %i atoms',atomCounter),path2LogFile);
    atomTimer(end+1) = toc(atomTimerStart); %#ok<SAGROW>
    logMessage(sprintf([' ---> Average time for one atom: %s \n' ...
        '      Average time for one position/orientation: %s \n'...
        '      Approximately ready on: %s.'] ...
        ,datestr(seconds(mean(atomTimer)),'HH:MM:SS') ...
        ,datestr(seconds(mean(atomTimer)/calculationSteps),'HH:MM:SS') ...
        ,datetime('now')+seconds(mean(atomTimer) ...
        *(atomsToCalculate-atomCounter))),path2LogFile,false);
    printEqualSignBreakLineToLogFile(path2LogFile);
    atomCounter = atomCounter + 1;
end



