%% Set Up System
clc
clear all %#ok<CLALL>

configuration = readConfigurationFile('config.txt');
if configuration.runOnServer
    baseConfiguration = readConfigurationFile( ...
        configuration.path2BaseConfigurationOnServer);
    addpath(genpath(baseConfiguration.path2LibraryOnServer));
else
    baseConfiguration = readConfigurationFile( ...
        configuration.path2BaseConfigurationOnLocalMachine);
    addpath(genpath(baseConfiguration.path2LibraryOnLocalMachine))
end

[path2Data,path2Save,path2ConstantsFile,path2LogFile] = ...
    setUpSystemBasedOnMachine(configuration);
deleteLogFile(path2LogFile);

logMessage('System is set up.', path2LogFile);
fileNames = getValuesFromStringEnumeration(configuration.fileNames,';' ...
    ,'string');
fieldNames = getValuesFromStringEnumeration( ...
    configuration.dataFieldNames,';','string');
deltaTs = getValuesFromStringEnumeration(configuration.deltaTs,';' ...
    ,'numeric');
dataSetCount = length(fileNames);
nearestNeighboursForEachDataSet = getValuesFromStringEnumeration( ...
    configuration.nearestNeighbours,';','numeric');

if configuration.reloadOldSimulation
    logMessage('Loading results from old simulation.',path2LogFile);
    checkForMismatchingConfigurations(configuration);
    oldSimulation = load(configuration.path2OldResults);
    logMessage(sprintf('Using old data from %s.' ...
        ,oldSimulation.startDateOfSimulation),path2LogFile,false)
    oldR1 = oldSimulation.r1WithExplIntegration;
    completedDataSets = length(struct2cell(oldR1))-1;
    atomCounter = oldSimulation.atomCounter;
    randomSequenceOfAtoms = oldSimulation.randomSequenceOfAtoms;
    r1WithExplIntegration = oldR1;
    clear oldR1 oldSimulation
else
    completedDataSets = 0;
    atomCounter = 1;
end

atomsToCalculate = configuration.atomsToCalculate;
startDateOfSimulation = datestr(now,'yyyymmdd');

orientationAngles = deg2rad(getValuesFromStringEnumeration( ...
    configuration.fibreOrientations,';','numeric'));
fibreOrientationsCount = size(orientationAngles,2);
logMessage(['    Found the orientations' sprintf(' %.f',rad2deg( ...
    orientationAngles))],path2LogFile,false);

positionAngles = deg2rad(getValuesFromStringEnumeration( ...
    configuration.myelinPositions,';','numeric'));
positionsInMyelinCount = size(positionAngles,2);
logMessage(['    Found the positions' sprintf(' %.f',rad2deg( ...
    positionAngles))],path2LogFile,false);

for dataSetNr = completedDataSets+1:dataSetCount
    %% Load data
    fileName = convertStringsToChars(fileNames(dataSetNr));
    fieldName = convertStringsToChars(fieldNames(dataSetNr));
    deltaT = deltaTs(dataSetNr);
    logMessage(sprintf(['Start loading data set %i of %i.' ...
        ' Data set name: %s with dT = %.3i'],dataSetNr,dataSetCount ...
        ,fileName,deltaT),path2LogFile);
    [trajectoryX,trajectoryY,trajectoryZ] = ...
        loadTrajectoriesFromSpecificFile(configuration,path2Data ...
        ,fileName,fieldName);
    logMessage('Data successfully loaded.', path2LogFile);
    %% Define constants
    logMessage('Defining constants.',path2LogFile,false);
    constants = readConstantsFile(path2ConstantsFile);
    dipolDipolConstant = 3/4*(constants.vaccumPermeability/(4*pi) ...
        *constants.hbar*constants.gyromagneticRatioOfHydrogenAtom^2)^2 ...
        /(constants.nanoMeter^6);
    omega0 = constants.gyromagneticRatioOfHydrogenAtom ...
        *configuration.mainMagneticField;
    %% Define simulation parameters
    logMessage('Defining simulation parameters.',path2LogFile,false);
    
    if exist('numberOfHs') %#ok<EXIST>
        oldNumberOfHs = numberOfHs;
    end
    [numberOfHs,timeSteps] = size(trajectoryX);
    if dataSetNr == 1
        randomSequenceOfAtoms = randperm(numberOfHs);
    else
        if configuration.changeRandomSequenceBetweenDataSets
            randomSequenceOfAtoms = randperm(numberOfHs);
        elseif numberOfHs ~= oldNumberOfHs
            randomSequenceOfAtoms = randperm(numberOfHs);
        end
    end
    
    logMessage(sprintf(['    Found %d hydrogen atoms at %d time steps' ...
        'of %.3d s'],numberOfHs,timeSteps,deltaT),path2LogFile,false);
    
    lags = round(configuration.fractionForLags*timeSteps);
    logMessage(sprintf(['    The lag is set to %d time steps,' ...
        'resulting in a simulation time of %d s.'] ...
        , lags,lags*deltaT),path2LogFile,false);
    
    nearestNeighbours = nearestNeighboursForEachDataSet(dataSetNr);
    checkForNearestNeighbourConflicts(nearestNeighbours,numberOfHs ...
        ,path2LogFile);
    logMessage(sprintf(['    Analysing %i nearst neighbours of' ...
    ' overall %i hydrogen atoms'],nearestNeighbours,numberOfHs) ...
    ,path2LogFile,false);
    
    %% Start simulation
    logMessage('Preallocation of some arrays.',path2LogFile,false);
    
    try r1WithExplIntegration.(fileName);
        logMessage('Loaded partial data into struct.',path2LogFile,false);
    catch
        r1WithExplIntegration.(fileName) = {};
        r1WithExplIntegration.(fileName).results = zeros( ...
            fibreOrientationsCount,positionsInMyelinCount ...
            ,atomsToCalculate);
        r1WithExplIntegration.(fileName).mainMagneticField = ...
            configuration.mainMagneticField;
        r1WithExplIntegration.(fileName).deltaT = deltaT;
        meanPositions = single([mean(trajectoryX,2) mean(trajectoryY,2) ...
            mean(trajectoryZ,2)]);
        r1WithExplIntegration.(fileName).randomAtomSequence = ...
            randomSequenceOfAtoms;
        r1WithExplIntegration.(fileName).correlationFunction0W0Saver ...
            = zeros(fibreOrientationsCount ...
            ,positionsInMyelinCount,size(trajectoryX,2),'like',single(1j));
        r1WithExplIntegration.(fileName).correlationFunction1W0Saver ...
            = zeros(fibreOrientationsCount ...
            ,positionsInMyelinCount,size(trajectoryX,2),'like',single(1j));
        r1WithExplIntegration.(fileName).correlationFunction2W0Saver ...
            = zeros(fibreOrientationsCount ...
            ,positionsInMyelinCount,size(trajectoryX,2),'like',single(1j));
        r1WithExplIntegration.(fileName).spectralDensity1W0 ...
            = zeros(fibreOrientationsCount,positionsInMyelinCount ...
            ,atomsToCalculate);
        r1WithExplIntegration.(fileName).spectralDensity2W0 ...
            = zeros(fibreOrientationsCount,positionsInMyelinCount ...
            ,atomsToCalculate);
    end
    
    atomIndex = zeros(1,atomsToCalculate);
    
    relativeX = zeros(numberOfHs,timeSteps,'like',single(1));
    relativeY= zeros(numberOfHs,timeSteps,'like',single(1));
    relativeZ = zeros(numberOfHs,timeSteps,'like',single(1));
    
    nearestNeighboursX = zeros(nearestNeighbours,timeSteps,'like' ...
        ,single(1));
    nearestNeighboursY = zeros(nearestNeighbours,timeSteps,'like' ...
        ,single(1));
    nearestNeighboursZ = zeros(nearestNeighbours,timeSteps,'like' ...
        ,single(1));
    nearestNeighbourDistancesPow3 = zeros(nearestNeighbours,timeSteps ...
        ,'like',single(1));
    
    rotatedX = zeros(nearestNeighbours,timeSteps,'like',single(1));
    rotatedY = zeros(nearestNeighbours,timeSteps,'like',single(1));
    rotatedZ = zeros(nearestNeighbours,timeSteps,'like',single(1));
    
    polarAngle = zeros(nearestNeighbours,timeSteps,'like',single(1));
    azimuthAngle = zeros(nearestNeighbours,timeSteps,'like',single(1));
    
    sphericalHarmonicZerothOrder = zeros(nearestNeighbours,timeSteps ...
        ,'like',single(1j));
    sphericalHarmonicFirstOrder = zeros(nearestNeighbours,timeSteps ...
        ,'like',single(1j));
    sphericalHarmonicSecondOrder = zeros(nearestNeighbours,timeSteps ...
        ,'like',single(1j));
    
    correlationFunction0W0 = zeros(1,lags,'like',single(1j));
    correlationFunction1W0 = zeros(1,lags,'like',single(1j));
    correlationFunction2W0 = zeros(1,lags,'like',single(1j));
    
    logMessage('Set up done. Starting Simulation.',path2LogFile);
    printBreakLineToLogFile(path2LogFile);
    
    for atomNumber = randomSequenceOfAtoms(atomCounter:atomsToCalculate)
        overallForAtom = tic;
        logMessage(sprintf('Selected atom number %i',atomNumber) ...
            ,path2LogFile);
        atomIndex(atomCounter) = atomNumber;
        
        logMessage('Calcualting relative positions.',path2LogFile,false);
        [relativeX,relativeY,relativeZ] ...
            = calculateRelativePositions(trajectoryX ...
            ,trajectoryY,trajectoryZ,atomNumber);
        
        logMessage('Finding nearest neighbours.',path2LogFile,false);
        [nearestNeighboursX,nearestNeighboursY,nearestNeighboursZ ...
            ,nearestNeighbourDistancesPow3] = findNearestNeighbours( ...
            nearestNeighbours,atomNumber,relativeX,relativeY ...
            ,relativeZ);
        
        for positionNumber = 1:positionsInMyelinCount
            positionAngle = positionAngles(positionNumber);
            zAxis = [0 0 1];
            rotationMatrixPosition = get3DRotationMatrix( ...
                positionAngle,zAxis);
            for orientationNumber = 1:fibreOrientationsCount
                orientationAngle = orientationAngles(orientationNumber);
                logMessage(sprintf(['=> Position: %i, orientation:' ...
                    ' %i deg'],rad2deg(positionAngle) ...
                    ,rad2deg(orientationAngle)),path2LogFile,false);
                yAxis = [0 1 0];
                rotationMatrixOrientation = get3DRotationMatrix( ...
                    orientationAngle,yAxis);
                totalRotationMatrix = ...
                    rotationMatrixOrientation*rotationMatrixPosition;
                logMessage('    Transforming coordinates.',path2LogFile ...
                    ,false);
                [rotatedX,rotatedY,rotatedZ] =  ...
                    rotateTrajectoriesWithRotationMatrix( ...
                    totalRotationMatrix,nearestNeighboursX ...
                    ,nearestNeighboursY,nearestNeighboursZ);
                
                logMessage('    Calculation spherical coordinates.' ...
                    ,path2LogFile,false);
                [polarAngle,azimuthAngle] = ...
                    transformToSphericalCoordinates(rotatedX,rotatedY ...
                    ,rotatedZ);
                
                logMessage('    Calculating spherical coordinates.' ...
                    ,path2LogFile,false);
                [sphericalHarmonicZerothOrder ...
                    ,sphericalHarmonicFirstOrder ...
                    ,sphericalHarmonicSecondOrder] ...
                    = calculateSphericalHarmonics(polarAngle ...
                    ,azimuthAngle,nearestNeighbourDistancesPow3);
                
                logMessage('    Calculating correlation function.' ...
                    ,path2LogFile,false);
                correlationFunction0W0 = calculateCorrelationFunction( ...
                    sphericalHarmonicZerothOrder,lags);
                correlationFunction1W0 = calculateCorrelationFunction( ...
                    sphericalHarmonicFirstOrder,lags);
                correlationFunction2W0 = calculateCorrelationFunction( ...
                    sphericalHarmonicSecondOrder,lags);
                
                r1WithExplIntegration.(fileName) ...
                    .correlationFunction0W0Saver(orientationNumber ...
                    ,positionNumber,:) = (squeeze( ...
                    r1WithExplIntegration.(fileName) ...
                    .correlationFunction0W0Saver(orientationNumber ...
                    ,positionNumber,:))'*(atomCounter-1) + ...
                    correlationFunction0W0)/atomCounter;
                r1WithExplIntegration.(fileName) ...
                    .correlationFunction1W0Saver(orientationNumber ...
                    ,positionNumber,:) = (squeeze( ...
                    r1WithExplIntegration.(fileName) ...
                    .correlationFunction1W0Saver( ...
                    orientationNumber,positionNumber,:))' ...
                    *(atomCounter-1)+correlationFunction1W0)/atomCounter;
                r1WithExplIntegration.(fileName) ...
                    .correlationFunction2W0Saver(orientationNumber ...
                    ,positionNumber,:) = (squeeze( ...
                    r1WithExplIntegration.(fileName) ...
                    .correlationFunction2W0Saver( ...
                    orientationNumber,positionNumber,:))' ...
                    *(atomCounter-1)+correlationFunction2W0)/atomCounter;
                
                logMessage('    Calculating spectral density.' ...
                    ,path2LogFile,false);
                [spectralDensity1W0,spectralDensity2W0] = ...
                    calculateSpectralDensities(correlationFunction1W0 ...
                    ,correlationFunction2W0,omega0,deltaT,lags);
                
                r1WithExplIntegration.(fileName).spectralDensity1W0( ...
                    orientationNumber,positionNumber,atomCounter) ...
                    = spectralDensity1W0;
                r1WithExplIntegration.(fileName).spectralDensity2W0( ...
                    orientationNumber,positionNumber,atomCounter) ...
                    = spectralDensity2W0;
                
                logMessage('    Calculating relaxation rate.' ...
                    ,path2LogFile,false);
                r1WithExplIntegration.(fileName).results( ...
                    orientationNumber,positionNumber,atomCounter) ...
                    = calculateR1WithSpectralDensity(spectralDensity1W0 ...
                    ,spectralDensity2W0,dipolDipolConstant);
                logMessage(sprintf('--> R1 = %.4f.' ...
                    ,r1WithExplIntegration.(fileName).results( ...
                    orientationNumber,positionNumber,atomCounter)) ...
                    ,path2LogFile);
            end
            printDottedBreakLineToLogFile(path2LogFile);
        end
        
        if mod(atomCounter,configuration.savingInterval) == 0
            lastSavingDate = datestr(now,'yyyymmdd_HHMM');
            createDataSavingObject();
            save(path2Save,'-struct','dataSavingObject','-v7.3');
            logMessage('Saved data',path2LogFile);
        end
        logMessage(sprintf('Finished atom %i. Needed time %.4f' ...
            ,atomNumber,toc(overallForAtom)),path2LogFile,false);
        logMessage(sprintf('Calculated %i atom(s).',atomCounter),path2LogFile);
        printBreakLineToLogFile(path2LogFile);
        atomCounter = atomCounter + 1;
    end
    atomCounter = 1;
    printEqualSignBreakLineToLogFile(path2LogFile);
end












