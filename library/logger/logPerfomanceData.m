function logPerfomanceData(atomNumber,atomCounter,path2LogFile,timeTracks)
logMessage(sprintf('FINISHED ATOM %i.',atomNumber),path2LogFile);
logMessage(sprintf('Overall needed time: %.4f.' ...
    ,timeTracks.overallForAtom(atomCounter)),path2LogFile);
logMessage(sprintf(['Average time needed to calculate relative ' ...
    'positions: %.4f s.'],mean(timeTracks.relativePositions( ...
    1:atomCounter))),path2LogFile);
logMessage(sprintf(['Average time needed to find nearest ' ...
    'neighbours: %.4f s.'], mean(timeTracks.nearestNeighbours( ...
    1:atomCounter))),path2LogFile);
logMessage(sprintf('Average time needed to transform atoms: %.4f s' ...
    ,mean(timeTracks.transformation(1:atomCounter))),path2LogFile);
logMessage(sprintf(['Average time needed to get spherical ' ...
    'coordinates: %.4f s.'],mean(timeTracks.sphericalCoordinates( ...
    1:atomCounter))),path2LogFile);
logMessage(sprintf(['Average time needed to get spherical ' ...
    'harmonics: %.4f s.'],mean(timeTracks.sphericalHarmonics( ...
    1:atomCounter))),path2LogFile);
logMessage(sprintf(['Average time needed to determine correlation' ...
    'functions: %.4f s.'],mean(timeTracks.correlationFunction( ...
    1:atomCounter))),path2LogFile);
logMessage(sprintf(['Average time to determine spectral ' ...
    'density: %.4f s.'],mean(timeTracks.spectralDensity( ...
    1:atomCounter))),path2LogFile);
logMessage(sprintf(['Average time to determine relaxation rate ' ...
    'R1: %.4f'],mean(timeTracks.relaxationRate(1:atomCounter))) ...
    ,path2LogFile);
end
